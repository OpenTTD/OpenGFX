name: Publish binaries

on:
  release:
    types:
    - published
  schedule:
  - cron: '0 21 * * *'
  workflow_dispatch:

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  publish_binaries:
    name: Publish binaries
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set variables
      shell: bash
      id: vars
      run: |
        FULL_VERSION=$(./findversion.sh)
        RELEASE_DATE=$(TZ='UTC' date +"%Y-%m-%d %H:%M UTC")
        VERSION=$(echo "${FULL_VERSION}" | cut -f 1 -d$'\t')
        IS_TAG=$(echo "${FULL_VERSION}" | cut -f 5 -d$'\t')

        # If this secret is not set, we are doing a dryrun. This means that
        # people who fork this repository will not try to publish this to AWS
        # (as that will most likely fail anyway).
        if [ -z "${{ secrets.CDN_S3_BUCKET }}" ]; then
          DRY_RUN="true"
        else
          DRY_RUN="false"
        fi

        REPO_NAME=$(echo ${{ github.repository }} | cut -d/ -f2 | tr [A-Z] [a-z])
        # If we run on "schedule", we are producting a nightly. Otherwise it
        # is a tag, so a release.
        if [ "${{ github.event_name }}" = "schedule" ]; then
          FOLDER="${REPO_NAME}-nightlies"

          # Download the latest version we published; if we are different, it
          # is safe to assume we are newer.
          LATEST_VERSION=$(curl --fail -s https://cdn.openttd.org/${FOLDER}/latest.yaml | grep version | cut -d: -f2 | cut -b 2-)

          if [ "${IS_TAG}" = "1" ]; then
            echo "Run on schedule; going to skip this run, last change was released"
            SKIP="true"
          elif [ "${LATEST_VERSION}" = "${VERSION}" ]; then
            echo "Run on schedule; going to skip this run, as we already build this version"
            SKIP="true"
          elif [ "${DRY_RUN}" = "true" ]; then
            # Also skip everything if we are triggered frm the schedule and we
            # are a fork. That would waste a lot of CPU cycles for no good reason.
            echo "Run on schedule; going to skip this run, as this is a fork"
            SKIP="true"
          else
            SKIP="false"
          fi
        else
          FOLDER="${REPO_NAME}-releases"
          SKIP="false"
        fi

        echo "release-date=${RELEASE_DATE}" >> $GITHUB_OUTPUT
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "folder=${FOLDER}" >> $GITHUB_OUTPUT
        echo "dry-run=${DRY_RUN}" >> $GITHUB_OUTPUT
        echo "skip=${SKIP}" >> $GITHUB_OUTPUT

        echo "Release-date: ${RELEASE_DATE}"
        echo "Version: ${VERSION}"
        echo "Folder: ${FOLDER}"
        echo "Dry-run: ${DRY_RUN}"
        echo "Skip: ${SKIP}"

    - if: steps.vars.outputs.skip == 'false'
      name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - if: steps.vars.outputs.skip == 'false'
      name: Install dependencies
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y gimp grfcodec --no-install-recommends

        python -m pip install --upgrade pip
        python -m pip install nml

    - if: steps.vars.outputs.skip == 'false'
      name: Build
      shell: bash
      run: |
        make maintainer-clean
        make bundle_zip bundle_xsrc

        # Move bundles in their own folder
        mkdir bundles
        mv opengfx-${{ steps.vars.outputs.version }}-source.tar.xz bundles/
        mv opengfx-${{ steps.vars.outputs.version }}-all.zip bundles/

    - if: steps.vars.outputs.skip == 'false'
      name: Create checksums
      shell: bash
      run: |
        cd bundles
        for i in $(ls); do
          openssl dgst -r -md5 -hex $i > $i.md5sum
          openssl dgst -r -sha1 -hex $i > $i.sha1sum
          openssl dgst -r -sha256 -hex $i > $i.sha256sum
        done

        # Show the content of the bundles folder, to make problems debugging easier
        ls -l

    - if: steps.vars.outputs.skip == 'false'
      name: Prepare bundles folder
      shell: bash
      run: |
        echo "${{ steps.vars.outputs.release-date }}" > bundles/released.txt
        cp README.md bundles/
        cp changelog.txt bundles/

        # Show the content of the bundles folder, to make problems debugging easier
        ls -l bundles/

    - if: steps.vars.outputs.dry-run == 'false' && steps.vars.outputs.skip == 'false'
      name: Publish
      id: publish
      shell: bash
      run: |
        aws s3 cp --recursive --only-show-errors bundles/ s3://${{ secrets.CDN_S3_BUCKET }}/${{ steps.vars.outputs.folder }}/${{ steps.vars.outputs.version }}/
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

    - if: steps.vars.outputs.dry-run == 'false' && steps.vars.outputs.skip == 'false'
      name: Trigger 'update CDN'
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.DEPLOYMENT_TOKEN }}
        repository: OpenTTD/workflows
        event-type: update-cdn
        client-payload: '{"version": "${{ steps.vars.outputs.version }}", "folder": "${{ steps.vars.outputs.folder }}"}'
